8장 예외 처리
	예외처리는 보험이다. 정상적으로 작동하는 프로그램이 동작하는 과정에서 나타나는 에러, 프로그램 실행 중 발생하는 예기치 않은 사건을 다룬다.
	**문법에러, 논리에러, 시스템에러는 예외처리가 아니라 개발자의 잘못이다.
	** ex) 정수를 0으로 나누는 경우, 배열 인덱스를 벗어난 경우, 부적절한 형변환이 일어나는 경우, 입출력을 위한 파일이 없는 경우.
	
	1절 예외처리 : 예외가 날 가능성이 있는 부분에 대해 미리 예상하고 그에 대한 처리를 프로그래밍 하는것
	: 좀 더 안정적으로 실행하기 위함.

	ex) 파일을 다룰 때 : 파일이 없거나 쓰기금지로 인한 오류 FileNotFoundError
	ex) 데이터베이스 프로그래밍 시 제약조건 등으로 CRUD(CREATE,READ,UPDATE,DELETE) 오류
	ex) 네트워크 프로그래밍 시 일시적인 네트워크 장애 시 연결 실패 오류
	ex) 리스트나 튜플의 인덱스를 벗어난 오류

	2절 문법
	try ~ except 구문

	try  :
		예외가 일어날 만한 문장들
	except 예외타입1 :
		예외타입1이 발생 시 실행 할 문장
	except 예외타입2 : 보통 except Exception as e :
		예외타입2이 발생 시 실행 할 문장 : 보통 print(e)
	.......


	3절 raise로 예외 발생시키기
	강제로 예외를 발생시키는 방법 raise : 수행을 멈추게 하거나 심각한 오류가 발생하기 전 상태의 로그를 체크하기 위함
	** 잘 사용하는 방법은 아니지만 중첩 반복문 탈출 시 flag 방법 대신 사용하기도 한다.
	class BreakOutError(Exception) : pass

	try :
    		for a in range(3) : # a = 0, 1, 2
        		for b in range(1,3) : # b = 1, 2
            			if a == b :
                			raise BreakOutError # 중첩 루프 빠져나가기
            			print(a,b)
	except BreakOutError :
	    	print('중첩 반복문 탈출')

	4절 추상클래스와 추상메서드 :
	추상클래스 : 객체를 만드는 것이 목적이 아니라 자식 클래스(서브 클래스)를 잘 만들게 하는 목적
	** 필요한 정보를 이렇게 활용해라, 문서 양식을 제공하는 느낌
	** 클래스를 상속 받은 클래스들의 표준을 제시한다.
		- 파이썬 3.4부터 사용 가능한 표현 : 기존 자바용어에서 사용하던 것이 파이썬에서 구현되었다면 활용해야한다.

	5절 파일 정리 작업 : with절 이용
	<기존>
	try :
   		 f = open('data/ch08.txt', 'r') # else 구문을 try 구문 아래로 바로 붙여서 사용
   		 print(f.read())
    
	except Exception as e :
   		 print('예외 사유', e)
    
	finally : # 파일을 열고 닫는 행위가 1개 세트라서 finally 구문을 이용한다.
   		 print('try구문 종료~')
    		f.close()

	-> close()를 까먹으면 문제가 발생하기 너무 쉬운 구조로
	이럴 때 with 문을 사용한다. with 문은 **컨텍스트 매니저(context manager)**를 사용할 때 
	(__enter__(self), __exit__(self,exc_type, exc_val, exc_tb) 두 메서드를 반드시 갖고 있어야 한다.

	주로 파일 입출력, 락(lock), 네트워크 연결, 데이터베이스 연결 등 자원 관리에 많이 사용

	with open('data/읽을 자료.txt', 'r') as f :
		print(f.read())