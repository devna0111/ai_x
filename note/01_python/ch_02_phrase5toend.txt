2장 자료형과 연산자

1절 변수
	선언이 필요 없고 할당과 동시에 타입 세팅
	문자, 숫자,_ 로 변수명 작성이 가능하나 숫자로 시작 불가.
	예약어(for, while, class) 사용 불가
	다중 변수 할당이 가능 : 일괄 할당

2절 화면 입출력
	input() : 사용자로부터 필요 값을 입력 받을 때 사용. 기본 문자열로 반호나
	print(출력내용, sep='구분자', end='종결어구')

3절 기본 자료형
	숫자형 : int, float, complex(복소수) # 1 +1j 형태
		## float 숫자형은 메모리를 많이 잡아먹음
		int/int = 실수 반환
		지수형 표현 #1.12e12 : 1.12 * 10**12
		## 지수형 표현은 실수
	문자형 : "",'' 형태 활용하며 시작과 끝은 같은 따옴표 사용
		줄바꿈은 '''''' 속 활용하여 작성하거나 \n 탈출 문자로 가능
		\n 같은 탈출 문자를 출력하기 위해서는 raw string 활용
		# 예시 : print(r'\n\b\'\/')
		문자열은 간단한 연산자 + 와 * 를 활용 가능
		+ : 문자열의 합 * : 문자열의 반복 
		raw 데이터 : 정규표현식 []{2,4} 이해 필요 사용시에는 re 모듈 활용이 반드시 필요함
******************************************************************************************************************************************
		정규표현식

		1. 참조 : 위키백과
		2. 간략한 문법 :
  		  \d (숫자와 매치 [0-9] 와 동일)
  		  \D (숫자가 아닌 것)
  		  \w (영문자나 숫자를 의미, [a-zA-Z0-9]
 		   \W (영문자나 숫자가 아닌 문자)
 		   . (문자 하나)
 		   \. (. 의미)
 		   \- (- 의미)
 		   {2, 4} (2, 4번 반복)
 		   {4} (4번 반복)
 		   {2,} (2번 이상 반복)
  		  + (1번 이상 반복){1, }
  		  * (0번 이상 반복) {0,}
  		  ? (0번이나 1번 반복) {0, 1}
		3. 정규표현식 연습장(https://regexr.com/)
   		 ex1) 전화번호 정규 표현식 : 010-9999-9999 02-777-8888 01099997777 027778888 02)714-5656 010 1234 1234 010.1234.1234
  		  ex2) 이메일 : abc12@naver.com / abc123@0to7.co.kr
 		   ex3) 주민등록번호 : | & 을 통해 결과를 추출 # 향후 진행
  		   981212-2052444 011212-4054555 060101-3021522 정상
   		  989912-2052444 010132-5404544 040111-5050500 비정상
		4. 소스 구현
		# \d{2,3} - \d{3,4} - \d{4}
		# [0,9]{2,3} - [0,9]{3,4} - [0,9]{4}
		# \d{2,3}[)\-\. ]?\d{3,4}[)\-\. ]?\d{4} : 전화 번호 추출하는 방식
		# \w*[@]\w*[.]\w*[\.]?\w* : 이메일 추출하는 방식 (한글을 사용하게 되면 [a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣])
		# \w{3,}[@][가-힣a-zA-Z0-9]+([.]\w*){1,2} : 이메일 추출하는 방식2
		# [ㄱ-ㅎ0-9a-zA-Z\-] : 문자를 제외하는 방법?
		-> 디렉터리 체크 등에 활용이 용이함 // 코딩테스트 활용 몹시 용이 
******************************************************************************************************************************************

		문자열 슬라이싱 : 인덱스에 따라 가능하며 제일 중요한 역순에 대해 이해 필요 : [-5:-1:-1] ......
					인덱스는 없는 인덱스 참조 요구에 에러를, 슬라이싱은 없는 부분은 과감히 제외하고 가능한 부분만!
		
(이어서) 논리형 : bool : True or False 반환. 논리식의 결과에 따라 반환됨.
			중요한 포인트는 False 반환하는 값에 대한 이해.
				ex) [], {}, (), 0, "" 등 자료가 빈 값
	자료형 체크 방법 : type() 함수, isinstance(data, 자료형) : 결과값 True/False
	자료형 변경도 가능한데 str() : 거진 모든 자료 변형 가능. int() : 정수로 변환 :: 실수 혹은 <<<문자열 정수>>> bool() : 매개변수에 대해 논리 반환. float() : 정수, 실수, 	문자열 정수, 문자열 실수 모두 가능

4절 포멧팅
	기본 f-string을 잘 활용하면 어려울 내용은 없음
	{[인덱스]:[공백대체문자][정렬방식][자릿수][타입]}.format(변수들)

	중요하게 작용하는 건 {float:.5f} : . 아래 소수점 5자리 구현 {문자열:5.3d} 빈공간 5에 문자열[:3]까지 할당,
	** int나 float의 경우 부호를 표현하고 싶을 때 {숫자:+}를 통해 가능하며 해당 내용은 note 참고가 필요함. += 사용할지 + 사용할지 빈 공간에 대체문자를 채울지
	 날짜의 경우 datetime 라이브러리를 활용한다. strftime() 활용해서 하는 게 지금은 제일 익숙하다.

5절 연산자
	5.1 산술 연산자
		: +, - , *, /, //, **, $  #
		: / 연산 결과는 실수형
	5.2 할당 연산자 
		: =, +=, -=, *=, **=, /=, //=, %=
	5.3 논리 연산자
		: and, or, not 을 사용하고
		: &, |  <- 옆 두개는 비트연산자로 활용하도록 하자
	5.4 비교 연산자
		: <, >, <=, >=, ==, != 
		: 중요한 포인트로, 비교연산 중 = 항상 우측!
	5.5 비트 연산자 
		: &, |, ^, ~
		: 실무에서 사용할 경우는 적지만 코딩테스트에서는 자주 활용..

6절 문자열 다루기
	: 정말 많은 함수가 있고 한 번씩 어떤 기능인지 살펴보면 좋을 것 같음. dir(str) 을 통해 함수 체크해보자.
	: strip(), split(), replace()는 정말 손발보다 많이 사용하더라.
	: replace(old, new, 횟수) 이것도 진짜 알면 쓸모가 많은 듯

7절 시간, 날짜, 날짜시간 다루기
	: datetime 라이브러리의 datetime 함수를 사용해 strftime으로...


