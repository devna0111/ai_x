3장 데이터 구조
	여러가지 자료를 한 변수에 담는 것이 목적

	1절 리스트
		리스트는 슬라이싱, 인덱싱 지원.
		1.1 리스트 생성
		- 리스트는 list(), [ ] 를 통해 만들 수 있다.
		- list() 를 통해 만드려면 요소의 객체가 **순회가능한 객체** 여야 한다.

		1.2 기본 정보 조회
		- min(), max()
		- len()
		- data.sort() : 정렬, 원본이 변경되므로 주의 :: 속도는 sorted()보다 빠르다고 하니 속도가 중요하면 복사뜨고 sort 돌리는게...
		

		1.3 요소 추가
		- +로 리스트 연결 : 새로운 리스트 객체를 생성해서 반환하므로 시간이 조금 더 필요함
		- * 로 리스트 반복 연결
		- append() 요소 한 개 추가
		- extend() 인자 속 리스트 객체를 이어 붙임(연결과 동일하나 원본에 바로 더해 시간 속도 양호, += 기능)
		- insert(idx, val) idx 자리에 val값 추가하고 기존 idx부터 끝까지 인덱스 shift
		
		1.4 인덱싱과 요소 개수
		- 리스트객체[인덱스] : 인덱스를 이용한 접근 : IndexError 주의
		- 리스트객체.index(찾을데이터) : 찾을 데이터가 리스트 객체에 있다면 index 반환. 없으면 IndexError
		- 리스트객체.count(찾을데이터) : 찾을 데이터가 리스트 객체에 몇 개 있는 지 반환 ** 없으면 0!!
		- 리스트객체.index(찾을데이터, position= K) : K 번째 이후에 나오는 찾을 데이터의 인덱스 반환

		1.5 원하는 요소 추출
		- 리스트 슬라이싱 : 문자열과 동일
		- 리스트 컴프리헨션 : 리스트에서 원하는 데이터를 추출

		1.6 요소 수정하기
		- 슬라이싱을 이용해서 요소 수정(step 부분이 미포함 : 부분 리스트가 통째로 수정)
		- step이 포함되면 요소 개수를 맞춰줘야 가능하다! ** 항상 실수 많은 부분

		1.7 요소 삭제하기
		- pop() : 가장 마지막 인덱스 요소가 반환되고 리스트에서 삭제
		- pop(index) : index의 요소가 반환되고 리스트에서 삭제 // 인덱스가 리스트 내에서 모두 수정되며 정말 많은 시공간이 소요
		- remove(value) : 리스트 속에서 value를 찾아서 제일 앞의 요소를 삭제
		- del 변수[idx] : idx번째 요소가 삭제

		1.8 리스트 복사하기
		- sort(), reverseI(), remove()는 원본 데이터를 바꿔버리기에 속도는 빠르지만 원본의 보존이 필요할 때 사용이 불가
		- 새로 담을 변수명 = 원래 리스트.copy() 
		- 위 함수로 사용하면 편리
