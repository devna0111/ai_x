ch10 넘파이(2)
4절 복사와 뷰
    복사 : 얕은복사 / 깊은복사 -> 얕은복사의 경우 같은 메모리를 참조하기 때문에 원본이 바뀜.
           원본 데이터를 건드리지 않기 위해 깊은 복사(.copy()) 습관이 중요하다
     뷰  : 얕은 복사의 일종으로 데이터 값을 빌려서 다른 구조를 구현할 때 사용한다. slicing이 뷰의 일종이다.
     

5절 고급 인덱싱
    1. 인덱스 배열을 통한 인덱싱
        ex) a = [[1,2,3,4,5,6]]
            print(a[ [0,1,2] ]) -> array([1,2,3]) 반환
        => 즉, a[안쪽배열]은 안쪽배열의 모양의 숫자에 a의 값을 가져오라는 의미. 2차원배열 3차원배열도 활용이 가능하다.
        
    2. 논리 배열을 이용한 인덱싱
       a = np.array([0,1,10,11,12,13,14,15,99])
       a%2 == 0 # 논리 배열
       array([ True, False,  True, False,  True, False,  True, False, False])
       
       a[a%2 == 0]
       array([ 0, 10, 12, 14])
       
       a[a>12]
       array([13, 14, 15, 99])

6절 선형대수
    행렬 곱 @, .dot()
    역행렬 np.linalg.inv(arr)
    전치행렬 np.T
    연립방정식 해 풀이 np.linalg.solve(a,b) 
    **
    - 만약 정방행렬이 아닌 행렬의 역행렬을 활용해야 한다면,
    - ex) 3x2 행렬 A를 단위행렬로 만들려면
    - ex) np.linalg.inv(A) @ (A.T @ A) = np.linalg.inv(A) @ (A.T @ K)
    