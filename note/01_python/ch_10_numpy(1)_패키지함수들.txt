Numpy 패키지 함수와 속성
배열 : 한 변수에 여러 동일 단일자료형의 데이터가 남긴 구조  *다중차원
numpy는 c언어 기반의 패키지로 연산속도가 빠르며 타 패키지 대비 고용량 수치 계산에 최적화.

np.all(a == load_a) 넘파이의 배열 비교는 np.all을 통해 실행한다.

- 배열 속성
	행렬.dtype 요소들의 타입 // 타입변경은 행렬.astype(np.int64) or .astype('int64') ★
	행렬.itemsize 한 요소의 bytesize 
	행렬.ndim 차원수(축수) ★
	행렬.size 배열 요소들의 개수 ★
	행렬.shape 배열의 구조 (면,행,열) ★
	
- 배열 생성 함수
	np.array(iterable_obj,dtype,copy) ★
	np.array(iterable_obj,dtype,copy).reshape(면,행,열) ★
	np.arange(from,stop,step) 벡터형태,
	np.linspace(from,to, count) from과 to 두 값 사이 count개의 값을 갖는 1차원 배열
	np.ones((행,열), dtype)
	np.zeros((행,열), dtype)
	np.full((행,열), 기본값, dtype) ★
	np.empty((행,열), dtype) : 메모리에 있던 값을 랜덤하게 받아서 행열을 만듬
	np.random.random((행,열)) : 0 ~ 1 미만 균등분포를 갖는 랜덤값을 갖는 행열 ★
	np.random.uiform(low, high, (행,열)) : low ~ high 미만 균등분포를 갖는 랜덤값을 갖는 행열
	np.random.normal(평균loc=0, 표준편차scale=1, (행,열)) : 평균과 표준편차를 갖는 정규분포 랜덤값 ★
	np.random.rand(n) : 균등분포의 1차원 난수 배열 발생(난수 개수 n개의 1차원 배열)
	np.random.randn(n) : 표준정규분포(평균이 0, 표준편차가 1인 정규분포)의 1차원 난수 배열 발생
					(난수 n개의 1차원 배열)

- 배열 차원 변경
	행렬.reshape(행,열,면) 기존 배열을 행,열,면 형태로 변환 -1을 넣으면 다른 값에 따라 자동 계산 ★
	행렬.flatten()  1차원 변경한 모습 (할당 안하면 변경 아님) ★
	행렬.ravel() 1차원 변경(할당 안하면 변경된 것이 아님)
	행렬.resize((면,행,열),refcheck=T/F) : 배열 자체의 모양을 변경 // refcheck = False : 사이즈가 안맞으면 값을 채워넣음
    행렬.shape = (a,b) 형식으로도 변경 가능

	a.T : 전치행렬 (할당 필요) # a.transpose()

	배열[ : , np.newaxis]
	 np.expand_dims(배열, axis = 1) 차원 증가 ★
	
- 배열 연산
	- 요소별 연산, 브로드캐스팅
	- 행렬 연산(2차원) : 행렬곱(내적) @, dot,
				 단위행렬 :np.eye(n) => 정방행렬

- 범용 함수 : 메모리와 시간을 효율적으로 활용할 수 있다.
	np.add(), np.multiply(), np.substract(), np.sqrt()

- 배열 합치기
	np.vstack((A,B))
	np.hstack((A,B))
	np.dstack((A,B)) 마지막 축(열)끼리 합침

cf)) 비슷한 다른 함수
	np.column_stack((A,B)) 1차원 배열을 열단위로 배열하여 2차원으로 합침 
	np.row_stack((A,B)) 행단위로 합침
	np.stack((A,B), axis)

cf)) 객체 r_, c_
	np.r_[a, b, ... ] : row 단위로 쌓은 것
	np.c_[a, b, ... ] : column 단위로 쌓은 것

cf) 배열 분리하기
	np.vsplit( ary, 정수나 인덱스벡터) axis=0 첫번째 축을 따라 분할
	np.hsplit( ary, 정수나 인덱스벡터) axis=1 두번째 축을 따라 분할
	np.dsplit( ary, 정수나 인덱스벡터) depth를 따라 나눔(3차원 이상에서만 동작)
		정수 n : n개 분리
		벡터(리스트, 튜플 [n]) : n번째 인덱스를 기점으로 분리
		벡터(리스트, 튜플 [m:n]) : m번째, n번째 인덱스를 기점으로 분리 ->인덱스 2개 기입 시 3개 덩어리
	split(ary, 개수나 인덱스벡터, axis)
		  - axis = 0 : vsplit() 동일
 		  - axis = 1 : hsplit() 동일
  		  - axis = 2 : 3차원 이상에서만 동장, dsplit() 동일
	np.array_split(ary, 정수나 인덱스 벡터, axis) 나눠지지 않는 정수로도 분리가 가능





- ※배열의 저장(피클, npy 사용)※

피클)) 저장
import pickle
with open('data/ch10_a.pkl', 'wb') as f :
    pickle.dump(a, f)

피클)) 읽기
with open('data/ch10_a.pkl', 'rb') as f :
    load_a = pickle.load(f)

npy)) 저장
np.save('data/ch10_a.npy',a)

npy)) 읽기
load_a2 = np.load('data/ch10_a.npy')
np.all(load_a2==a)
