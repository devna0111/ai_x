2장 자료형과 연산자

1절 변수
	선언이 필요 없고 할당과 동시에 타입 세팅
	문자, 숫자,_ 로 변수명 작성이 가능하나 숫자로 시작 불가.
	예약어(for, while, class) 사용 불가
	다중 변수 할당이 가능 : 일괄 할당

2절 화면 입출력
	input() : 사용자로부터 필요 값을 입력 받을 때 사용. 기본 문자열로 반호나
	print(출력내용, sep='구분자', end='종결어구')

3절 기본 자료형
	숫자형 : int, float, complex(복소수) # 1 +1j 형태
		## float 숫자형은 메모리를 많이 잡아먹음
		int/int = 실수 반환
		지수형 표현 #1.12e12 : 1.12 * 10**12
		## 지수형 표현은 실수
	문자형 : "",'' 형태 활용하며 시작과 끝은 같은 따옴표 사용
		줄바꿈은 '''''' 속 활용하여 작성하거나 \n 탈출 문자로 가능
		\n 같은 탈출 문자를 출력하기 위해서는 raw string 활용
		# 예시 : print(r'\n\b\'\/')
		문자열은 간단한 연산자 + 와 * 를 활용 가능
		+ : 문자열의 합 * : 문자열의 반복 
		raw 데이터 : 정규표현식 []{2,4} 이해 필요 사용시에는 re 모듈 활용이 반드시 필요함
		-> 디렉터리 체크 등에 활용이 용이함 // 코딩테스트 활용 몹시 용이 
		문자열 슬라이싱 : 인덱스에 따라 가능하며 제일 중요한 역순에 대해 이해 필요 : [-5:-1:-1] ......
					인덱스는 없는 인덱스 참조 요구에 에러를, 슬라이싱은 없는 부분은 과감히 제외하고 가능한 부분만!
		
(이어서) 논리형 : bool : True or False 반환. 논리식의 결과에 따라 반환됨.
			중요한 포인트는 False 반환하는 값에 대한 이해.
				ex) [], {}, (), 0, "" 등 자료가 빈 값
	자료형 체크 방법 : type() 함수, isinstance(data, 자료형) : 결과값 True/False
	자료형 변경도 가능한데 str() : 거진 모든 자료 변형 가능. int() : 정수로 변환 :: 실수 혹은 <<<문자열 정수>>> bool() : 매개변수에 대해 논리 반환. float() : 정수, 실수, 	문자열 정수, 문자열 실수 모두 가능

4절 포멧팅
	기본 f-string을 잘 활용하면 어려울 내용은 없음
	중요하게 작용하는 건 {float:.5f} : . 아래 소수점 5자리 구현 {문자열:5.3d} 빈공간 5에 문자열[:3]까지 할당,
	** int나 float의 경우 부호를 표현하고 싶을 때 {숫자:+}를 통해 가능하며 해당 내용은 note 참고가 필요함. += 사용할지 + 사용할지 빈 공간에 대체문자를 채울지
	 날짜의 경우 datetime 라이브러리를 활용한다. strftime() 활용해서 하는 게 지금은 제일 익숙하다.

