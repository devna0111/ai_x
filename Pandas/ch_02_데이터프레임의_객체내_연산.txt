객체 내 연산
1. 반올림 round(decimals=n)

n=0 : 일의자리까지 반올림
15.11 => 15.0
n = 1 : 양수의 경우 소수 n번째 까지 반올림
15.11 => 15.1
n = -1 : 음수의 경우 10의 n승까지 반올림
15.11 => 20

2. 덧셈  sum(axis=0,1 , min_count = n, skipna=True)

axis = 0 : 열의 합을 반환
axis = 1 : 행의 합을 반환

min_count = n : n개 이상의 요소가 필요하다
만약, NaN 이 포함된 행/열에서 n-1개의 요소만 존재하면 NaN 반환

skipna = T/F : NaN 을 무시 : True 반대는 False

3.곱셈  prod(axis=0,1 , min_count = n, skipna=True)

sum과 동일한 조건으로 작동하는 곱셈연산자

4. 순위 매기기 rank
보통 기존 데이터프레임의 기준 값을 사용해
새로운 열을 만들어서 사용
df['rank']= df['value'].rank(method=??)

method 종류
average : 동점은 평균 구함
min : 동점은 제일 낮은 등수 : 달리기 등수
max : 동점은 제일 큰 수
first : 동점은 먼저 등록된 수가 수 먼저 부여
dense : 공동 2등 공동3등 공동4등 시험 성적

5. 행열의 차이 diff
axis = 0행 1열

periods = +2 / -2  
+2 : 0행과 -2행의 차, 1행과 -1행의 차, 2행과 0행의 차
-2 : 0행과 2행의 차, 1행과 3행의 차,.,, 6행과 8행의 차

해당하는 행/열이 비어있다면 NaN 출력


6.  차이[백분율] pct_change

DataFrame.pct_change(periods = 1,fii_method='ffill',limit=None)

1. periods : 간격 조절. 
 1col = 1행 - 0행 / 0행의 값

if periods = 2 :
2콜 = 2행 - 0행 / 0행

if periods = -1 :
2콜 = 2콜 - 3콜 / 3콜

** 만약 행렬의 값이 없다면 NaN 결측치.

2.  fill_method : NaN을 어떤 값으로 치환할 지 결정하는 변수
'ffill' : 이전의 변수와 동일하게
'bfill' : 이후의 변수와 동일하게
'''
1
NaN
NaN
2
'''
위 경우 fill_method 기본값 반영 시 2행의 NaN은 1, 3행은 2행의 1값을 따와 1로 계산

bfill의 경우 2행의 경우 아래 NaN의 값을 따와 1, 3행의 경우 아래 2값을 따와 2 반환

3.limit : 결측치를 몇 개 까지 처리할 거냐는 변수. 아무것도 넣지 않으면 모든 결측치를 보정한다는 의미이며 값을 자연수로 주면 위에서부터 n개까지 결측치를 보정해줌.

7.  누적계산 expanding
DataFrame.expanding().sum()

행이나 열의 값에 대해 누적으로 연산을 수행하는 메서드

보통 import numba 후
df.expanding(method = 'table').추가연산자(engine='numba')
를 통해 데이터 연산을 빠르게  만들어 활용

expanding 인자로는

axis = 0/1 행렬
min_periods = n n개 미만 연산은 NaN반환

추가연산자는 sum,prod,round,rank?,diff?,pct_change
등 객체내연산자 활용이 가능

8. rolling
테이블 내에서 원하는 특정 위치의 값에 **이상 **미만 등의 인덱스 조건식에 따라 객체 내 연산을 실행시키는 방법

window를 설정하여
< 00 <= 등의 계산을 하며

center를 설정하여 원하는 값의 위치를 수정이 가능하다.

그런데 특이사항으로 on 매개변수를 설정하여 시계열(시간데이터)을 기준으로도 값을 구할 수 있다.

# DataFrame.rolling (window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None, method='single')

# closed는
'left' : < ** <=
'right : <= ** <
'both' <= ** <=
'neither' : <**<

기본적으로 min_period = window의 값을 갖는데 위 neither의 경우 계산 인자가 window -1이 된다.

이 때 계산을 하기 위해선 min_period를 window -1 의 값을 할당해줘야한다.


9. groupby

# DataFrame.groupby(by=None, axis=0, 
# level=None, as_index=True, sort=True, group_keys=True, 
# squeeze=NoDefault.no_default, observed=False, dropna=True)

#1 reset_index :
DataFrame은 "행 인덱스(index)"를 가지고 있어. (row1, row2, row3 같은 거)
reset_index()는
현재 인덱스를 일반 컬럼으로 빼고
인덱스 번호를 0, 1, 2, 3... 이런 기본 숫자 인덱스로 다시 설정해주는 함수야.
reset_index(drop=True)를 주면, 기존 인덱스를 버리고 아예 없애버릴 수도 있어.

df.groupby(' 기준열').추가연산자()

-> 기준열에서 추가연산 후 반환

agg는 여러 추가연산 동시에 가능
-> multicul로 반환

apply : map과 비슷하며
실행하고 나면 인덱스가 1개 더 출력된다
이를 제거하기 위해 group_keys=False 사용

df_cat = pd.Categorical(df['index'],categories=['A','B','C','D','E','F'])
# df의 index열에 대해서 A,B,C,D,E,F로 Categorical을 하여 df_cat 생성
print(df_cat)

'''  print(df['col1'].groupby(df_cat).count())
 :  이러면 ABCDEF에 대해 결과를 출력하는데
F는 df에서는 확인이 불가함

이러한 결측치는 제거를 위해
observed = True를 통해

확인이 가능한 열만 살리기 가능

# as_index :
특정 열을 지정해서 groupny를 사용하면
인덱스가 특정열이 되는데
이게 마음에 안들면 
as_index = False를 사용해서 index 유지 가능

# dropna : 기존 NaN값이 있더라도
True 상태면 확인이 되지 않으며
확인을 위해선 dropna = False로 두고
NaN값을 확인 가능

